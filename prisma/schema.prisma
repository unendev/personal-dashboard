generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                          String              @id @default(cuid())
  email                       String              @unique
  name                        String?
  createdAt                   DateTime            @default(now())
  updatedAt                   DateTime            @updatedAt
  spotifyId                   String?             @unique
  spotifyAccessToken          String?             @map("spotify_access_token")
  spotifyAccessTokenExpiresAt DateTime?           @map("spotify_access_token_expires_at")
  spotifyRefreshToken         String?             @map("spotify_refresh_token")
  emailVerified               DateTime?           @map("email_verified")
  image                       String?
  password                    String?
  accounts                    Account[]
  aiSummaries                 AISummary[]
  instanceTags                InstanceTag[]
  logs                        Log[]
  operationRecords            OperationRecord[]
  quests                      Quest[]
  sessions                    Session[]
  skills                      Skill[]
  timerTasks                  TimerTask[]
  todos                       Todo[]
  treasures                   Treasure[]
  twitterUsers                TwitterUser[]
  layout                      UserLayout?
  youtubeVideoCache           YouTubeVideoCache[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Skill {
  id          String   @id @default(cuid())
  name        String
  description String?
  level       Int      @default(1)
  experience  Int      @default(0)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  quests      Quest[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("skills")
}

model Quest {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      QuestStatus @default(PLANNING)
  priority    Priority    @default(MEDIUM)
  skillId     String?
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  logs        Log[]
  skill       Skill?      @relation(fields: [skillId], references: [id])
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quests")
}

model Log {
  id         String                @id @default(cuid())
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  content    String?
  questId    String?
  userId     String
  timestamp  DateTime              @default(now())
  categories LogCategoryInstance[]
  quest      Quest?                @relation(fields: [questId], references: [id])
  user       User                  @relation(fields: [userId], references: [id])

  @@map("logs")
}

model LogCategoryInstance {
  id            String                   @id @default(cuid())
  name          String
  logId         String
  log           Log                      @relation(fields: [logId], references: [id], onDelete: Cascade)
  subCategories LogSubCategoryInstance[]

  @@map("log_category_instances")
}

model LogSubCategoryInstance {
  id         String                @id @default(cuid())
  name       String
  categoryId String
  activities LogActivityInstance[]
  category   LogCategoryInstance   @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("log_subcategory_instances")
}

model LogActivityInstance {
  id            String                 @id @default(cuid())
  name          String
  duration      String
  subCategoryId String
  subCategory   LogSubCategoryInstance @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)

  @@map("log_activity_instances")
}

model LogCategory {
  id        String        @id @default(cuid())
  name      String
  parentId  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  parent    LogCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children  LogCategory[] @relation("CategoryHierarchy")

  @@map("log_categories")
}

model InstanceTag {
  id         String                 @id @default(cuid())
  name       String
  userId     String
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  user       User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  timerTasks TimerTaskInstanceTag[]

  @@unique([name, userId])
  @@map("instance_tags")
}

model TimerTaskInstanceTag {
  id            String      @id @default(cuid())
  timerTaskId   String
  instanceTagId String
  createdAt     DateTime    @default(now())
  instanceTag   InstanceTag @relation(fields: [instanceTagId], references: [id], onDelete: Cascade)
  timerTask     TimerTask   @relation(fields: [timerTaskId], references: [id], onDelete: Cascade)

  @@unique([timerTaskId, instanceTagId])
  @@map("timer_task_instance_tags")
}

model UserLayout {
  id           String @id @default(cuid())
  userId       String @unique
  layoutConfig Json
  user         User   @relation(fields: [userId], references: [id])

  @@map("user_layouts")
}

model TimerTask {
  id           String                 @id @default(cuid())
  name         String
  categoryPath String
  elapsedTime  Int                    @default(0)
  initialTime  Int                    @default(0)
  isRunning    Boolean                @default(false)
  startTime    Int?
  isPaused     Boolean                @default(false)
  pausedTime   Int                    @default(0)
  completedAt  Int?
  date         String
  userId       String
  parentId     String?
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  order        Int                    @default(0)
  instanceTag  String?
  instanceTags TimerTaskInstanceTag[]
  parent       TimerTask?             @relation("TaskHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     TimerTask[]            @relation("TaskHierarchy")
  user         User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("timer_tasks")
}

model Todo {
  id            String   @id @default(cuid())
  text          String
  completed     Boolean  @default(false)
  createdAtUnix Int
  priority      String   @default("medium")
  category      String?
  userId        String
  date          String
  parentId      String?
  order         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  parent        Todo?    @relation("TodoHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children      Todo[]   @relation("TodoHierarchy")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("todos")
}

model OperationRecord {
  id        String   @id @default(cuid())
  action    String
  taskName  String
  details   String?
  userId    String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("operation_records")
}

model AISummary {
  id         String   @id @default(cuid())
  userId     String
  date       String
  summary    String
  totalTime  Int
  taskCount  Int
  insights   Json
  categories Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("ai_summaries")
}

model posts {
  id               String    @id
  title            String
  url              String
  core_issue       String?
  key_info         Json?
  post_type        String?
  value_assessment String?
  timestamp        DateTime? @default(now()) @db.Timestamptz(6)
}

model reddit_posts {
  id               String    @id @map("id")
  title            String
  url              String
  core_issue       String?
  key_info         Json?
  post_type        String?
  value_assessment String?
  timestamp        DateTime? @default(now()) @db.Timestamptz(6)
}

model TwitterUser {
  id              String         @id @default(cuid())
  twitterId       String         @unique
  username        String         @unique
  name            String
  profileImageUrl String?
  publicMetrics   Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  userId          String?
  tweets          TwitterTweet[]
  user            User?          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twitter_users")
}

model TwitterTweet {
  id            String         @id @default(cuid())
  twitterId     String         @unique
  text          String
  createdAt     DateTime
  publicMetrics Json
  authorId      String
  cachedAt      DateTime       @default(now())
  expiresAt     DateTime
  attachments   Json?
  media         TwitterMedia[]
  author        TwitterUser    @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("twitter_tweets")
}

model TwitterMedia {
  id              String       @id @default(cuid())
  mediaKey        String       @unique @map("media_key")
  tweetId         String
  type            String
  url             String?
  previewImageUrl String?      @map("preview_image_url")
  width           Int?
  height          Int?
  altText         String?      @map("alt_text")
  tweet           TwitterTweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  @@map("twitter_media")
}

model YouTubeVideoCache {
  id           String    @id @default(cuid())
  videoId      String    @unique
  title        String
  description  String?
  thumbnail    String
  channelTitle String
  publishedAt  DateTime
  duration     String
  viewCount    String
  url          String
  likedAt      DateTime?
  userId       String
  cachedAt     DateTime  @default(now())
  expiresAt    DateTime
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("youtube_video_cache")
}

model spotify_cache {
  user_id    String   @id
  payload    Json
  updated_at DateTime @default(now()) @db.Timestamptz(6)
}

model Treasure {
  id            String          @id @default(cuid())
  title         String
  content       String?
  type          TreasureType
  tags          String[]        @default([])
  userId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  musicTitle    String?
  musicArtist   String?
  musicAlbum    String?
  musicUrl      String?
  musicCoverUrl String?
  theme         String?
  likesCount    Int             @default(0)
  images        Image[]
  likes         TreasureLike[]
  answers       TreasureAnswer[]
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("treasures")
}

model TreasureLike {
  id         String   @id @default(cuid())
  treasureId String
  userId     String
  createdAt  DateTime @default(now())
  treasure   Treasure @relation(fields: [treasureId], references: [id], onDelete: Cascade)
  
  @@map("treasure_likes")
}

model TreasureAnswer {
  id         String   @id @default(cuid())
  treasureId String
  userId     String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  treasure   Treasure @relation(fields: [treasureId], references: [id], onDelete: Cascade)
  
  @@map("treasure_answers")
}

model Image {
  id         String   @id @default(cuid())
  url        String
  alt        String?
  width      Int?
  height     Int?
  size       Int?
  treasureId String
  createdAt  DateTime @default(now())
  treasure   Treasure @relation(fields: [treasureId], references: [id], onDelete: Cascade)

  @@map("treasure_images")
}

enum QuestStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TreasureType {
  TEXT
  IMAGE
  MUSIC
}

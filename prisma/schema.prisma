generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String            @id @default(cuid())
  email                       String            @unique
  name                        String?
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime          @updatedAt
  spotifyId                   String?           @unique
  spotifyAccessToken          String?           @map("spotify_access_token")
  spotifyAccessTokenExpiresAt DateTime?         @map("spotify_access_token_expires_at")
  spotifyRefreshToken         String?           @map("spotify_refresh_token")
  aiSummaries                 AISummary[]
  logs                        Log[]
  operationRecords            OperationRecord[]
  quests                      Quest[]
  skills                      Skill[]
  timerTasks                  TimerTask[]
  todos                       Todo[]
  layout                      UserLayout?

  @@map("users")
}

model Skill {
  id          String   @id @default(cuid())
  name        String
  description String?
  level       Int      @default(1)
  experience  Int      @default(0)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  quests      Quest[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("skills")
}

model Quest {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      QuestStatus @default(PLANNING)
  priority    Priority    @default(MEDIUM)
  skillId     String?
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  logs        Log[]
  skill       Skill?      @relation(fields: [skillId], references: [id])
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quests")
}

model Log {
  id         String                @id @default(cuid())
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  content    String?
  questId    String?
  userId     String
  timestamp  DateTime              @default(now())
  categories LogCategoryInstance[]
  quest      Quest?                @relation(fields: [questId], references: [id])
  user       User                  @relation(fields: [userId], references: [id])

  @@map("logs")
}

model LogCategoryInstance {
  id            String                   @id @default(cuid())
  name          String
  logId         String
  log           Log                      @relation(fields: [logId], references: [id], onDelete: Cascade)
  subCategories LogSubCategoryInstance[]

  @@map("log_category_instances")
}

model LogSubCategoryInstance {
  id         String                @id @default(cuid())
  name       String
  categoryId String
  activities LogActivityInstance[]
  category   LogCategoryInstance   @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("log_subcategory_instances")
}

model LogActivityInstance {
  id            String                 @id @default(cuid())
  name          String
  duration      String
  subCategoryId String
  subCategory   LogSubCategoryInstance @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)

  @@map("log_activity_instances")
}

model LogCategory {
  id        String        @id @default(cuid())
  name      String
  parentId  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  parent    LogCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children  LogCategory[] @relation("CategoryHierarchy")

  @@map("log_categories")
}

model UserLayout {
  id           String @id @default(cuid())
  userId       String @unique
  layoutConfig Json
  user         User   @relation(fields: [userId], references: [id])

  @@map("user_layouts")
}

model TimerTask {
  id           String      @id @default(cuid())
  name         String
  categoryPath String
  elapsedTime  Int         @default(0)
  initialTime  Int         @default(0)
  isRunning    Boolean     @default(false)
  startTime    Int?
  isPaused     Boolean     @default(false)
  pausedTime   Int         @default(0)
  completedAt  Int?
  date         String
  userId       String
  parentId     String?
  order        Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  parent       TimerTask?  @relation("TaskHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     TimerTask[] @relation("TaskHierarchy")
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("timer_tasks")
}

model Todo {
  id            String   @id @default(cuid())
  text          String
  completed     Boolean  @default(false)
  createdAtUnix Int
  priority      String   @default("medium")
  category      String?
  userId        String
  date          String
  parentId      String?
  order         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  parent        Todo?    @relation("TodoHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children      Todo[]   @relation("TodoHierarchy")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("todos")
}

model OperationRecord {
  id        String   @id @default(cuid())
  action    String
  taskName  String
  details   String?
  userId    String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("operation_records")
}

model AISummary {
  id         String   @id @default(cuid())
  userId     String
  date       String
  summary    String
  totalTime  Int
  taskCount  Int
  insights   Json
  categories Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("ai_summaries")
}

enum QuestStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// 人生进度系统数据模型

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  skills Skill[]
  quests Quest[]
  logs   Log[]
  layout UserLayout?

  @@map("users")
}

model Skill {
  id          String   @id @default(cuid())
  name        String
  description String?
  level       Int      @default(1)
  experience  Int      @default(0)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quests      Quest[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("skills")
}

model Quest {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      QuestStatus @default(PLANNING)
  priority    Priority   @default(MEDIUM)
  skillId     String?
  skill       Skill?     @relation(fields: [skillId], references: [id], onDelete: SetNull)
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs        Log[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("quests")
}

model Log {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  content      String?
  questId      String?
  quest        Quest?   @relation(fields: [questId], references: [id])
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  dailySummary Json?

  @@map("logs")
}

model UserLayout {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  layoutConfig Json

  @@map("user_layouts")
}

enum QuestStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}